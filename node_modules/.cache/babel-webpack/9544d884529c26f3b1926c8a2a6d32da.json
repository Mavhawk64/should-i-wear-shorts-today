{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../apixu.service\";\nimport * as i3 from \"@angular/common\";\nexport let WeatherComponent = /*#__PURE__*/(() => {\n  class WeatherComponent {\n    constructor(formBuilder, apixuService) {\n      this.formBuilder = formBuilder;\n      this.apixuService = apixuService;\n      this.sampleUS = {\n        \"request\": {\n          \"type\": \"IP\",\n          \"query\": \"184.97.132.127\",\n          \"language\": \"en\",\n          \"unit\": \"f\"\n        },\n        \"location\": {\n          \"name\": \"Millard Mobile Home Park\",\n          \"country\": \"United States of America\",\n          \"region\": \"Nebraska\",\n          \"lat\": \"41.211\",\n          \"lon\": \"-96.130\",\n          \"timezone_id\": \"America/Chicago\",\n          \"localtime\": \"2021-08-28 22:10\",\n          \"localtime_epoch\": 1630188600,\n          \"utc_offset\": \"-5.0\"\n        },\n        \"current\": {\n          \"observation_time\": \"03:10 AM\",\n          \"temperature\": 84,\n          \"weather_code\": 113,\n          \"weather_icons\": [\"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0008_clear_sky_night.png\"],\n          \"weather_descriptions\": [\"Clear\"],\n          \"wind_speed\": 11,\n          \"wind_degree\": 150,\n          \"wind_dir\": \"SSE\",\n          \"pressure\": 1013,\n          \"precip\": 0,\n          \"humidity\": 64,\n          \"cloudcover\": 0,\n          \"feelslike\": 81,\n          \"uv_index\": 9,\n          \"visibility\": 10,\n          \"is_day\": \"no\"\n        },\n        \"forecast\": {\n          \"2021-08-27\": {\n            \"date\": \"2021-08-27\",\n            \"date_epoch\": 1630022400,\n            \"astro\": {\n              \"sunrise\": \"06:47 AM\",\n              \"sunset\": \"08:05 PM\",\n              \"moonrise\": \"10:51 PM\",\n              \"moonset\": \"11:59 AM\",\n              \"moon_phase\": \"Last Quarter\",\n              \"moon_illumination\": 62\n            },\n            \"mintemp\": 77,\n            \"maxtemp\": 104,\n            \"avgtemp\": 88,\n            \"totalsnow\": 0,\n            \"sunhour\": 13.5,\n            \"uv_index\": 8\n          }\n        }\n      };\n      this.sample = {\n        \"request\": {\n          \"type\": \"IP\",\n          \"query\": \"184.97.132.127\",\n          \"language\": \"en\",\n          \"unit\": \"m\"\n        },\n        \"location\": {\n          \"name\": \"Millard Mobile Home Park\",\n          \"country\": \"United States of America\",\n          \"region\": \"Nebraska\",\n          \"lat\": \"41.211\",\n          \"lon\": \"-96.130\",\n          \"timezone_id\": \"America/Chicago\",\n          \"localtime\": \"2021-08-28 22:11\",\n          \"localtime_epoch\": 1630188660,\n          \"utc_offset\": \"-5.0\"\n        },\n        \"current\": {\n          \"observation_time\": \"03:11 AM\",\n          \"temperature\": 29,\n          \"weather_code\": 113,\n          \"weather_icons\": [\"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0008_clear_sky_night.png\"],\n          \"weather_descriptions\": [\"Clear\"],\n          \"wind_speed\": 17,\n          \"wind_degree\": 150,\n          \"wind_dir\": \"SSE\",\n          \"pressure\": 1013,\n          \"precip\": 0,\n          \"humidity\": 64,\n          \"cloudcover\": 0,\n          \"feelslike\": 27,\n          \"uv_index\": 9,\n          \"visibility\": 16,\n          \"is_day\": \"no\"\n        },\n        \"forecast\": {\n          \"2021-08-27\": {\n            \"date\": \"2021-08-27\",\n            \"date_epoch\": 1630022400,\n            \"astro\": {\n              \"sunrise\": \"06:47 AM\",\n              \"sunset\": \"08:05 PM\",\n              \"moonrise\": \"10:51 PM\",\n              \"moonset\": \"11:59 AM\",\n              \"moon_phase\": \"Last Quarter\",\n              \"moon_illumination\": 62\n            },\n            \"mintemp\": 25,\n            \"maxtemp\": 40,\n            \"avgtemp\": 31,\n            \"totalsnow\": 0,\n            \"sunhour\": 13.5,\n            \"uv_index\": 8\n          }\n        }\n      };\n    }\n\n    ngOnInit() {\n      this.blankOptions = this.formBuilder.group({});\n      this.weatherSearchForm = this.formBuilder.group({\n        location: ['']\n      });\n      this.additionalOptions = this.formBuilder.group({\n        factorConditions: [''],\n        minTemperature: [''],\n        isCentigrade: ['']\n      });\n      this.sendToAPIXUService(); // this.sendToAPIXU();\n    }\n\n    applyStyles() {\n      var color;\n      color = this.theResponse === 'No!' ? {\n        'color': 'red'\n      } : {\n        'color': 'green'\n      };\n      return color;\n    }\n\n    sendToAPIXU(formValues) {\n      this.apixuService.getWeather(formValues.location)[1].subscribe(data => {\n        this.weatherDataUS = data;\n      });\n      this.apixuService.getWeather(formValues.location)[0].subscribe(data => {\n        this.weatherData = data;\n      });\n      this.determineConditionsBlank();\n    }\n\n    sendToAPIXUService() {\n      this.apixuService.getWeather('')[1].subscribe(data => {\n        this.weatherDataUS = data;\n        console.log(this.weatherDataUS);\n      });\n      this.apixuService.getWeather('')[0].subscribe(data => {\n        this.weatherData = data;\n        console.log(this.weatherData);\n      }); //TESTING ONLY\n      //this.weatherDataUS = this.sampleUS;\n      //this.weatherData = this.sample;\n\n      console.log(this.weatherDataUS);\n      console.log(this.weatherData);\n    }\n\n    determineConditionsBlank() {\n      var _a, _b, _c;\n\n      for (let i in (_a = this.weatherDataUS) === null || _a === void 0 ? void 0 : _a.forecast) {\n        this.theResponse = ((_b = this.weatherDataUS) === null || _b === void 0 ? void 0 : _b.forecast[i].avgtemp) == undefined ? \"\" : ((_c = this.weatherDataUS) === null || _c === void 0 ? void 0 : _c.forecast[i].avgtemp) > 65 ? \"Yes!\" : \"No!\";\n        break;\n      } // console.log(this.theResponse);\n\n    }\n\n    determineConditionsFilled(params) {\n      var _a, _b, _c, _d, _e, _f;\n\n      var factConds = params.factorConditions == undefined || params.factorConditions === \"\" ? false : params.factorConditions;\n      var minTemp = params.minTemperature == undefined || +params.minTemperature + \"\" === \"NaN\" || params.minTemperature === \"\" ? 65 : +params.minTemperature;\n      var centigrade = params.isCentigrade == undefined || params.isCentigrade === \"\" ? false : params.isCentigrade; // console.log(factConds + \" \" + minTemp + \" \" + centigrade);\n      // console.log(params);\n\n      if (minTemp == undefined) {\n        minTemp = 65;\n\n        if (centigrade) {\n          minTemp = (65 - 32) * 5.0 / 9.0;\n        }\n      }\n\n      if (centigrade) {\n        minTemp = minTemp * 9.0 / 5.0 + 32;\n      } // console.log(minTemp);\n\n\n      for (let i in (_a = this.weatherDataUS) === null || _a === void 0 ? void 0 : _a.forecast) {\n        this.theResponse = ((_b = this.weatherDataUS) === null || _b === void 0 ? void 0 : _b.forecast[i].avgtemp) == undefined ? \"\" : ((_c = this.weatherDataUS) === null || _c === void 0 ? void 0 : _c.forecast[i].avgtemp) > minTemp ? \"Yes!\" : \"No!\";\n        break;\n      }\n\n      if (factConds) {\n        var areBadConditions = false;\n\n        for (var i = 0; i < ((_d = this.weatherDataUS) === null || _d === void 0 ? void 0 : _d.current.weather_descriptions.length); i++) {\n          var element = (_e = this.weatherDataUS) === null || _e === void 0 ? void 0 : _e.current.weather_descriptions[i].toLowerCase();\n          areBadConditions = areBadConditions || element.includes(\"rain\") || element.includes(\"drizzle\") || element.includes(\"freez\")\n          /*Intentionally spelled that way*/\n          || element.includes(\"snow\") || element.includes(\"blizzard\") || element.includes(\"thunder\") || element.includes(\"mist\") || element.includes(\"sleet\");\n        }\n\n        this.theResponse = areBadConditions && ((_f = this.weatherDataUS) === null || _f === void 0 ? void 0 : _f.forecast[i].mintemp) <= minTemp ? \"No!\" : this.theResponse;\n      } // console.log(this.theResponse);\n\n\n      params.minTemperature = undefined;\n      params.factorConditions = undefined;\n      params.isCentigrade = undefined;\n    }\n\n  }\n\n  WeatherComponent.ɵfac = function WeatherComponent_Factory(t) {\n    return new (t || WeatherComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ApixuService));\n  };\n\n  WeatherComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WeatherComponent,\n    selectors: [[\"app-weather\"]],\n    decls: 34,\n    vars: 4,\n    consts: [[1, \"container\"], [\"id\", \"topSection\", 1, \"row\"], [1, \"col-md-2\"], [1, \"col-md-8\"], [3, \"formGroup\", \"ngSubmit\"], [\"type\", \"submit\", \"value\", \"Find Out!\", \"onclick\", \"document.getElementById('answer').hidden = false;document.getElementById('advancedOptions').hidden = false;document.getElementById('thisButton').hidden = true;\", \"id\", \"thisButton\", 1, \"btn\", \"btn-success\", \"btn-md\"], [\"id\", \"answer\", \"hidden\", \"true\", 1, \"answer\", 3, \"ngStyle\"], [\"id\", \"advancedOptions\", \"hidden\", \"true\", \"onclick\", \"document.getElementById('mySearch').hidden = !document.getElementById('mySearch').hidden\", 1, \"advancedOptions\"], [\"id\", \"mySearch\", \"hidden\", \"true\", 1, \"row\"], [1, \"text-left\", \"my-4\"], [1, \"form-group\"], [1, \"form-label\"], [\"formControlName\", \"factorConditions\", \"type\", \"checkbox\", \"id\", \"factorConditions\", \"value\", \"\", 1, \"my-checkbox\"], [\"type\", \"checkbox\", \"onclick\", \"document.getElementById('minTemp').disabled = !document.getElementById('minTemp').disabled;document.getElementById('minTemp').value='Set Minimum Temperature?';document.getElementById('celsius').disabled = !document.getElementById('celsius').disabled;document.getElementById('celsius').checked=false;\", \"checked\", \"true\", 1, \"my-checkbox\"], [\"formControlName\", \"minTemperature\", \"type\", \"text\", \"id\", \"minTemp\", \"placeholder\", \"Set Minimum Temperature?\", \"value\", \"60\", \"onclick\", \"document.getElementById('minTemp').value='';\", 1, \"my-mintemp\"], [\"type\", \"checkbox\", \"formControlName\", \"isCentigrade\", \"id\", \"celsius\", 1, \"my-checkbox\"], [\"type\", \"submit\", 1, \"btn\", \"btn-success\", \"btn-md\"]],\n    template: function WeatherComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelement(2, \"div\", 2);\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelementStart(4, \"h1\");\n        i0.ɵɵtext(5, \"Should I Wear Shorts Today?\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function WeatherComponent_Template_form_ngSubmit_6_listener() {\n          return ctx.determineConditionsBlank();\n        });\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵtext(8, \"Find Out!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"h2\", 6);\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\", 7);\n        i0.ɵɵtext(12, \"Not Satisfied? Try Our Advanced Options\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"div\", 8);\n        i0.ɵɵelement(15, \"div\", 2);\n        i0.ɵɵelementStart(16, \"div\", 3);\n        i0.ɵɵelementStart(17, \"h3\", 9);\n        i0.ɵɵtext(18, \"Additional Options:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"form\", 4);\n        i0.ɵɵlistener(\"ngSubmit\", function WeatherComponent_Template_form_ngSubmit_19_listener() {\n          return ctx.determineConditionsFilled(ctx.additionalOptions.value);\n        });\n        i0.ɵɵelementStart(20, \"div\", 10);\n        i0.ɵɵelementStart(21, \"label\", 11);\n        i0.ɵɵelement(22, \"input\", 12);\n        i0.ɵɵtext(23, \"Factor Conditions? (i.e. Rain, Snow, etc.) \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(24, \"br\");\n        i0.ɵɵelementStart(25, \"label\", 11);\n        i0.ɵɵelement(26, \"input\", 13);\n        i0.ɵɵelement(27, \"input\", 14);\n        i0.ɵɵelement(28, \"input\", 15);\n        i0.ɵɵtext(29, \"\\u00BAC \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(30, \"br\");\n        i0.ɵɵelementStart(31, \"label\", 11);\n        i0.ɵɵelementStart(32, \"button\", 16);\n        i0.ɵɵtext(33, \"Submit!\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"formGroup\", ctx.blankOptions);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngStyle\", ctx.applyStyles());\n        i0.ɵɵadvance(1);\n        i0.ɵɵtextInterpolate(ctx.theResponse);\n        i0.ɵɵadvance(9);\n        i0.ɵɵproperty(\"formGroup\", ctx.additionalOptions);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i3.NgStyle, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.DefaultValueAccessor],\n    styles: [\".advancedOptions[_ngcontent-%COMP%]{margin-top:10px;margin-bottom:10px;color:gray;text-decoration:underline;cursor:pointer;-webkit-user-select:none;user-select:none}.answer[_ngcontent-%COMP%]{font-family:sans-serif}.my-checkbox[_ngcontent-%COMP%]{margin-right:10px;margin-left:10px}.my-mintemp[_ngcontent-%COMP%]{width:350px}\"]\n  });\n  return WeatherComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}