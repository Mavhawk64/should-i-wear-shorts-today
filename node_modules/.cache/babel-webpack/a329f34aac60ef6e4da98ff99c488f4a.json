{"ast":null,"code":"import _asyncToGenerator from \"/Users/maverick/Coding Folder/should-i-wear-shorts-today/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WeatherComponent = class WeatherComponent {\n  constructor(formBuilder, apixuService) {\n    this.formBuilder = formBuilder;\n    this.apixuService = apixuService;\n    this.sampleUS = {\n      \"request\": {\n        \"type\": \"IP\",\n        \"query\": \"184.97.132.127\",\n        \"language\": \"en\",\n        \"unit\": \"f\"\n      },\n      \"location\": {\n        \"name\": \"Millard Mobile Home Park\",\n        \"country\": \"United States of America\",\n        \"region\": \"Nebraska\",\n        \"lat\": \"41.211\",\n        \"lon\": \"-96.130\",\n        \"timezone_id\": \"America/Chicago\",\n        \"localtime\": \"2021-08-28 22:10\",\n        \"localtime_epoch\": 1630188600,\n        \"utc_offset\": \"-5.0\"\n      },\n      \"current\": {\n        \"observation_time\": \"03:10 AM\",\n        \"temperature\": 84,\n        \"weather_code\": 113,\n        \"weather_icons\": [\"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0008_clear_sky_night.png\"],\n        \"weather_descriptions\": [\"Clear\"],\n        \"wind_speed\": 11,\n        \"wind_degree\": 150,\n        \"wind_dir\": \"SSE\",\n        \"pressure\": 1013,\n        \"precip\": 0,\n        \"humidity\": 64,\n        \"cloudcover\": 0,\n        \"feelslike\": 81,\n        \"uv_index\": 9,\n        \"visibility\": 10,\n        \"is_day\": \"no\"\n      },\n      \"forecast\": {\n        \"2021-08-27\": {\n          \"date\": \"2021-08-27\",\n          \"date_epoch\": 1630022400,\n          \"astro\": {\n            \"sunrise\": \"06:47 AM\",\n            \"sunset\": \"08:05 PM\",\n            \"moonrise\": \"10:51 PM\",\n            \"moonset\": \"11:59 AM\",\n            \"moon_phase\": \"Last Quarter\",\n            \"moon_illumination\": 62\n          },\n          \"mintemp\": 77,\n          \"maxtemp\": 104,\n          \"avgtemp\": 88,\n          \"totalsnow\": 0,\n          \"sunhour\": 13.5,\n          \"uv_index\": 8\n        }\n      }\n    };\n    this.sample = {\n      \"request\": {\n        \"type\": \"IP\",\n        \"query\": \"184.97.132.127\",\n        \"language\": \"en\",\n        \"unit\": \"m\"\n      },\n      \"location\": {\n        \"name\": \"Millard Mobile Home Park\",\n        \"country\": \"United States of America\",\n        \"region\": \"Nebraska\",\n        \"lat\": \"41.211\",\n        \"lon\": \"-96.130\",\n        \"timezone_id\": \"America/Chicago\",\n        \"localtime\": \"2021-08-28 22:11\",\n        \"localtime_epoch\": 1630188660,\n        \"utc_offset\": \"-5.0\"\n      },\n      \"current\": {\n        \"observation_time\": \"03:11 AM\",\n        \"temperature\": 29,\n        \"weather_code\": 113,\n        \"weather_icons\": [\"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0008_clear_sky_night.png\"],\n        \"weather_descriptions\": [\"Clear\"],\n        \"wind_speed\": 17,\n        \"wind_degree\": 150,\n        \"wind_dir\": \"SSE\",\n        \"pressure\": 1013,\n        \"precip\": 0,\n        \"humidity\": 64,\n        \"cloudcover\": 0,\n        \"feelslike\": 27,\n        \"uv_index\": 9,\n        \"visibility\": 16,\n        \"is_day\": \"no\"\n      },\n      \"forecast\": {\n        \"2021-08-27\": {\n          \"date\": \"2021-08-27\",\n          \"date_epoch\": 1630022400,\n          \"astro\": {\n            \"sunrise\": \"06:47 AM\",\n            \"sunset\": \"08:05 PM\",\n            \"moonrise\": \"10:51 PM\",\n            \"moonset\": \"11:59 AM\",\n            \"moon_phase\": \"Last Quarter\",\n            \"moon_illumination\": 62\n          },\n          \"mintemp\": 25,\n          \"maxtemp\": 40,\n          \"avgtemp\": 31,\n          \"totalsnow\": 0,\n          \"sunhour\": 13.5,\n          \"uv_index\": 8\n        }\n      }\n    };\n  }\n\n  ngOnInit() {\n    this.weatherSearchForm = this.formBuilder.group({\n      location: ['']\n    });\n    this.additionalOptions = this.formBuilder.group({\n      factorConditions: [''],\n      minTemperature: [''],\n      isCentigrade: ['']\n    });\n    this.sendToAPIXUService(); // this.sendToAPIXU();\n  }\n\n  applyStyles() {\n    var color;\n    color = this.theResponse === 'No!' ? {\n      'color': 'red'\n    } : {\n      'color': 'green'\n    };\n    return color;\n  }\n\n  sendToAPIXU(formValues) {\n    var _this = this;\n\n    this.apixuService.getWeather(formValues.location)[1].subscribe(data => {\n      this.weatherDataUS = data;\n      /*console.log(this.weatherDataUS);*/\n    });\n    this.apixuService.getWeather(formValues.location)[0].subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data) {\n        _this.weatherData = data;\n        yield _this.determineConditionsBlank();\n        /*console.log(this.weatherData);*/\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    this.determineConditionsBlank();\n  }\n\n  sendToAPIXUService() {\n    var _this2 = this;\n\n    this.apixuService.getWeather('')[1].subscribe( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (data) {\n        _this2.weatherDataUS = data;\n        yield _this2.determineConditionsBlank();\n        /*console.log(JSON.stringify(this.weatherDataUS));*/\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n    this.apixuService.getWeather('')[0].subscribe(data => {\n      this.weatherData = data;\n      /*console.log(JSON.stringify(this.weatherData));*/\n    }); //TESTING ONLY\n    //this.weatherDataUS = this.sampleUS;\n    //this.weatherData = this.sample;\n    // console.log(this.weatherDataUS);\n    // console.log(this.weatherData);\n  }\n\n  determineConditionsBlank() {\n    var _a, _b, _c;\n\n    for (let i in (_a = this.weatherDataUS) === null || _a === void 0 ? void 0 : _a.forecast) {\n      this.theResponse = ((_b = this.weatherDataUS) === null || _b === void 0 ? void 0 : _b.forecast[i].mintemp) == undefined ? \"\" : ((_c = this.weatherDataUS) === null || _c === void 0 ? void 0 : _c.forecast[i].mintemp) > 60 ? \"Yes!\" : \"No!\";\n      break;\n    }\n\n    console.log(this.theResponse);\n  }\n\n  determineConditionsFilled(params) {\n    var _a, _b, _c, _d, _e;\n\n    var factConds = params.factorConditions;\n    var minTemp = +params.minTemperature;\n    var centigrade = params.isCentigrade;\n    console.log(params);\n\n    if (minTemp == undefined) {\n      minTemp = 60;\n\n      if (centigrade) {\n        minTemp = (60 - 32) * 5.0 / 9.0;\n      }\n    }\n\n    if (centigrade) {\n      minTemp = minTemp * 9.0 / 5.0 + 32;\n    }\n\n    console.log(minTemp);\n\n    for (let i in (_a = this.weatherDataUS) === null || _a === void 0 ? void 0 : _a.forecast) {\n      this.theResponse = ((_b = this.weatherDataUS) === null || _b === void 0 ? void 0 : _b.forecast[i].mintemp) == undefined ? \"\" : ((_c = this.weatherDataUS) === null || _c === void 0 ? void 0 : _c.forecast[i].mintemp) > minTemp ? \"Yes!\" : \"No!\";\n      break;\n    }\n\n    if (factConds) {\n      var areBadConditions = false;\n\n      for (var i = 0; i < ((_d = this.weatherDataUS) === null || _d === void 0 ? void 0 : _d.current.weather_descriptions.length); i++) {\n        var element = (_e = this.weatherDataUS) === null || _e === void 0 ? void 0 : _e.current.weather_descriptions[i].toLowerCase();\n        areBadConditions = areBadConditions || element.includes(\"rain\") || element.includes(\"drizzle\") || element.includes(\"freez\")\n        /*Intentionally spelled that way*/\n        || element.includes(\"snow\") || element.includes(\"blizzard\") || element.includes(\"thunder\") || element.includes(\"mist\") || element.includes(\"sleet\");\n      }\n\n      this.theResponse = areBadConditions ? \"No!\" : this.theResponse;\n    }\n\n    console.log(this.theResponse);\n  }\n\n};\nWeatherComponent = __decorate([Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})], WeatherComponent);\nexport { WeatherComponent };","map":{"version":3,"sources":["/Users/maverick/Coding Folder/should-i-wear-shorts-today/src/app/weather/weather.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup } from '@angular/forms';\nimport { ApixuService} from '../apixu.service';\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html',\n  styleUrls: ['./weather.component.css']\n})\nexport class WeatherComponent implements OnInit {\n  public weatherSearchForm!: FormGroup;\n  public location!: String;\n  public weatherDataUS: any;\n  public weatherData: any;\n  public theResponse!: String;\n  public additionalOptions!: FormGroup;\n  public factorConditions!: boolean;\n  public minTemperature!: number;\n  public isCentigrade!: boolean;\n  public sampleUS: any = {\n    \"request\": {\n      \"type\": \"IP\",\n      \"query\": \"184.97.132.127\",\n      \"language\": \"en\",\n      \"unit\": \"f\"\n    },\n    \"location\": {\n      \"name\": \"Millard Mobile Home Park\",\n      \"country\": \"United States of America\",\n      \"region\": \"Nebraska\",\n      \"lat\": \"41.211\",\n      \"lon\": \"-96.130\",\n      \"timezone_id\": \"America/Chicago\",\n      \"localtime\": \"2021-08-28 22:10\",\n      \"localtime_epoch\": 1630188600,\n      \"utc_offset\": \"-5.0\"\n    },\n    \"current\": {\n      \"observation_time\": \"03:10 AM\",\n      \"temperature\": 84,\n      \"weather_code\": 113,\n      \"weather_icons\": [\n        \"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0008_clear_sky_night.png\"\n      ],\n      \"weather_descriptions\": [\n        \"Clear\"\n      ],\n      \"wind_speed\": 11,\n      \"wind_degree\": 150,\n      \"wind_dir\": \"SSE\",\n      \"pressure\": 1013,\n      \"precip\": 0,\n      \"humidity\": 64,\n      \"cloudcover\": 0,\n      \"feelslike\": 81,\n      \"uv_index\": 9,\n      \"visibility\": 10,\n      \"is_day\": \"no\"\n    },\n    \"forecast\": {\n      \"2021-08-27\": {\n        \"date\": \"2021-08-27\",\n        \"date_epoch\": 1630022400,\n        \"astro\": {\n          \"sunrise\": \"06:47 AM\",\n          \"sunset\": \"08:05 PM\",\n          \"moonrise\": \"10:51 PM\",\n          \"moonset\": \"11:59 AM\",\n          \"moon_phase\": \"Last Quarter\",\n          \"moon_illumination\": 62\n        },\n        \"mintemp\": 77,\n        \"maxtemp\": 104,\n        \"avgtemp\": 88,\n        \"totalsnow\": 0,\n        \"sunhour\": 13.5,\n        \"uv_index\": 8\n      }\n    }\n  };\n  public sample: any = {\n    \"request\": {\n      \"type\": \"IP\",\n      \"query\": \"184.97.132.127\",\n      \"language\": \"en\",\n      \"unit\": \"m\"\n    },\n    \"location\": {\n      \"name\": \"Millard Mobile Home Park\",\n      \"country\": \"United States of America\",\n      \"region\": \"Nebraska\",\n      \"lat\": \"41.211\",\n      \"lon\": \"-96.130\",\n      \"timezone_id\": \"America/Chicago\",\n      \"localtime\": \"2021-08-28 22:11\",\n      \"localtime_epoch\": 1630188660,\n      \"utc_offset\": \"-5.0\"\n    },\n    \"current\": {\n      \"observation_time\": \"03:11 AM\",\n      \"temperature\": 29,\n      \"weather_code\": 113,\n      \"weather_icons\": [\n        \"https://assets.weatherstack.com/images/wsymbols01_png_64/wsymbol_0008_clear_sky_night.png\"\n      ],\n      \"weather_descriptions\": [\n        \"Clear\"\n      ],\n      \"wind_speed\": 17,\n      \"wind_degree\": 150,\n      \"wind_dir\": \"SSE\",\n      \"pressure\": 1013,\n      \"precip\": 0,\n      \"humidity\": 64,\n      \"cloudcover\": 0,\n      \"feelslike\": 27,\n      \"uv_index\": 9,\n      \"visibility\": 16,\n      \"is_day\": \"no\"\n    },\n    \"forecast\": {\n      \"2021-08-27\": {\n        \"date\": \"2021-08-27\",\n        \"date_epoch\": 1630022400,\n        \"astro\": {\n          \"sunrise\": \"06:47 AM\",\n          \"sunset\": \"08:05 PM\",\n          \"moonrise\": \"10:51 PM\",\n          \"moonset\": \"11:59 AM\",\n          \"moon_phase\": \"Last Quarter\",\n          \"moon_illumination\": 62\n        },\n        \"mintemp\": 25,\n        \"maxtemp\": 40,\n        \"avgtemp\": 31,\n        \"totalsnow\": 0,\n        \"sunhour\": 13.5,\n        \"uv_index\": 8\n      }\n    }\n  };\n  constructor(private formBuilder: FormBuilder, private apixuService: ApixuService) { }\n  ngOnInit() {\n    this.weatherSearchForm = this.formBuilder.group({location: ['']});\n    this.additionalOptions = this.formBuilder.group({factorConditions: [''], minTemperature: [''], isCentigrade: ['']});\n    this.sendToAPIXUService();\n    // this.sendToAPIXU();\n  }\n\n  applyStyles() {\n    var color;\n    color = this.theResponse === 'No!' ? {'color' : 'red'} : {'color' : 'green'};\n    return color;\n  }\n\n  sendToAPIXU(formValues: WeatherComponent) {\n  this.apixuService.getWeather(formValues.location)[1].subscribe(data => {this.weatherDataUS = data; /*console.log(this.weatherDataUS);*/});\n    this.apixuService.getWeather(formValues.location)[0].subscribe(async data => { this.weatherData = data; await this.determineConditionsBlank();/*console.log(this.weatherData);*/});\n    this.determineConditionsBlank();\n  }\n\n  sendToAPIXUService() {\n    this.apixuService.getWeather('')[1].subscribe(async data => { this.weatherDataUS = data; await this.determineConditionsBlank();/*console.log(JSON.stringify(this.weatherDataUS));*/ });\n    this.apixuService.getWeather('')[0].subscribe(data => { this.weatherData = data; /*console.log(JSON.stringify(this.weatherData));*/ });\n\n    //TESTING ONLY\n    //this.weatherDataUS = this.sampleUS;\n    //this.weatherData = this.sample;\n    // console.log(this.weatherDataUS);\n    // console.log(this.weatherData);\n    \n  }\n\n determineConditionsBlank() {    \n   for (let i in this.weatherDataUS?.forecast) {\n     this.theResponse = this.weatherDataUS?.forecast[i].mintemp == undefined ? \"\" : this.weatherDataUS?.forecast[i].mintemp > 60 ? \"Yes!\" : \"No!\";\n     break;\n   }\n    console.log(this.theResponse);\n  }\n\n  determineConditionsFilled(params: any) {\n    var factConds = params.factorConditions;\n    var minTemp: number = +params.minTemperature;\n    var centigrade = params.isCentigrade;\n    console.log(params);\n    if(minTemp == undefined) {\n      minTemp = 60;\n      if(centigrade) {\n        minTemp = (60-32) * 5.0 / 9.0;\n      }\n    }\n    if(centigrade) {\n      minTemp = minTemp * 9.0 / 5.0 + 32;\n    }\n    console.log(minTemp);\n    for (let i in this.weatherDataUS?.forecast) {\n      this.theResponse = this.weatherDataUS?.forecast[i].mintemp == undefined ? \"\" : this.weatherDataUS?.forecast[i].mintemp > minTemp ? \"Yes!\" : \"No!\";\n      break;\n    }\n    if(factConds) {\n      var areBadConditions: boolean = false;\n      for(var i = 0; i < this.weatherDataUS?.current.weather_descriptions.length; i++) {\n        var element: String = this.weatherDataUS?.current.weather_descriptions[i].toLowerCase();\n        areBadConditions = areBadConditions || element.includes(\"rain\") || element.includes(\"drizzle\") || element.includes(\"freez\") /*Intentionally spelled that way*/ || element.includes(\"snow\") || element.includes(\"blizzard\") || element.includes(\"thunder\") || element.includes(\"mist\") || element.includes(\"sleet\");\n      }\n    this.theResponse = areBadConditions ? \"No!\" : this.theResponse;  \n    }\n    console.log(this.theResponse);\n  }\n\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}